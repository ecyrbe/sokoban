{"version":3,"sources":["components/sokoban.module.css","components/help.tsx","hooks/levels.ts","hooks/sokoban.ts","utils/classnames.ts","utils/block-styles.ts","Game.tsx","hooks/keyboard.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","Block","Help","React","memo","className","style","help","descriptions","instructions","levelBlocks","empty","objective","$","box","boxOnObjective","player","playerOnObjective","wall","loadLevels","Original","Atlas01","Atlas02","Atlas03","Atlas04","flatMap","levels","LevelCollection","Level","map","level","name","Id","shape","L","row","Array","from","item","width","Number","Width","height","Height","Direction","State","dirPositions","Map","getPlayerPosition","findIndex","blocks","some","block","includes","column","Error","useSokoban","useState","localStorage","getItem","index","setIndex","useMemo","loadNext","useCallback","setItem","String","useLevels","playing","state","setState","initboard","playerPosition","board","setBoard","move","direction","dir","get","directionToPosition","last","length","next","cloneDeep","movingBlock","completed","pop","undo","slice","restart","useEffect","set","Left","Top","Right","Bottom","cn","names","join","styles","styleFrom","boxjective","playerJective","Game","callback","codes","options","keydown","keyup","cb","useRef","current","downHandler","event","code","upHandler","window","addEventListener","removeEventListener","useKeyBoard","preventDefault","levelPrefix","levelTitle","element","levelState","helpNext","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc462499.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"state\":\"sokoban_state__3BNgf\",\"board\":\"sokoban_board__2ohVF\",\"level\":\"sokoban_level__1q9uE\",\"levelPrefix\":\"sokoban_levelPrefix__2urEE\",\"levelTitle\":\"sokoban_levelTitle__3tPy3\",\"levelState\":\"sokoban_levelState__2CU_c\",\"helpNext\":\"sokoban_helpNext__34Vzc\",\"bounce\":\"sokoban_bounce__3yVX1\",\"help\":\"sokoban_help__1W438\",\"descriptions\":\"sokoban_descriptions__2A3k9\",\"instructions\":\"sokoban_instructions__21-oW\",\"element\":\"sokoban_element__1y5L6\",\"empty\":\"sokoban_empty__37CAP\",\"wall\":\"sokoban_wall__1v6xG\",\"objective\":\"sokoban_objective__1mxlS\",\"box\":\"sokoban_box__1sACT\",\"boxjective\":\"sokoban_boxjective__2Py-k\",\"player\":\"sokoban_player__aGSOk\",\"playerJective\":\"sokoban_playerJective__b5k0j\"};","import React from \"react\";\nimport style from \"./sokoban.module.css\";\n\nfunction HelpImpl() {\n  return (\n    <div className={style.help}>\n      <div className={style.descriptions}>\n        <div>&uarr;</div>\n        <div>&larr;&nbsp;&rarr;</div>\n        <div>&darr;</div>\n        <div>backspace</div>\n        <div>escape</div>\n      </div>\n      <div className={style.instructions}>\n        <div> Move</div>\n        <div> Move</div>\n        <div> Move</div>\n        <div> Undo</div>\n        <div> restart level</div>\n      </div>\n    </div>\n  );\n}\n\nexport const Help = React.memo(HelpImpl);\n","import { useState, useMemo, useCallback } from \"react\";\nimport Original from \"../datas/Original.json\";\nimport Atlas01 from \"../datas/Atlas01.json\";\nimport Atlas02 from \"../datas/Atlas02.json\";\nimport Atlas03 from \"../datas/Atlas03.json\";\nimport Atlas04 from \"../datas/Atlas04.json\";\n\nexport type Level = {\n  name: string;\n  shape: Block[][];\n  width: number;\n  height: number;\n};\n\nexport interface SokobanLevels {\n  Title: string;\n  Description: string;\n  Email: string;\n  LevelCollection: LevelCollection;\n}\n\nexport interface LevelCollection {\n  Level: SokobanLevel[];\n}\n\nexport interface SokobanLevel {\n  Id: string;\n  Width: string;\n  Height: string;\n  L: string[];\n}\n\nexport enum Block {\n  empty,\n  objective,\n  box,\n  boxOnObjective,\n  player,\n  playerOnObjective,\n  wall,\n}\n\nconst levelBlocks = {\n  \" \": Block.empty,\n  \".\": Block.objective,\n  $: Block.box,\n  \"*\": Block.boxOnObjective,\n  \"@\": Block.player,\n  \"+\": Block.playerOnObjective,\n  \"#\": Block.wall,\n};\n\ntype LevelBlock = keyof typeof levelBlocks;\n\nconst SOKOBAN_LEVEL_KEY = \"SokobanLevel\";\n\nfunction loadLevels() {\n  const AllLevels = [\n    Original,\n    Atlas01,\n    Atlas02,\n    Atlas03,\n    Atlas04,\n  ] as SokobanLevels[];\n  return AllLevels.flatMap((levels) =>\n    levels.LevelCollection.Level.map((level) => ({\n      name: level.Id,\n      shape: level.L.map((row) =>\n        Array.from(row).map((item) => levelBlocks[item as LevelBlock])\n      ),\n      width: Number(level.Width),\n      height: Number(level.Height),\n    }))\n  );\n}\n\nexport function useLevels() {\n  const [levels] = useState<Level[]>(loadLevels);\n  const [index, setIndex] = useState(() =>\n    Number(localStorage.getItem(SOKOBAN_LEVEL_KEY))\n  );\n  const level = useMemo(() => levels[index], [levels, index]);\n  const loadNext = useCallback(() => {\n    setIndex(index + 1);\n    localStorage.setItem(SOKOBAN_LEVEL_KEY, String(index + 1));\n  }, [index]);\n\n  return { index, level, loadNext };\n}\n","import { useEffect, useState, useCallback } from \"react\";\nimport { Level, Block, useLevels } from \"./levels\";\nimport { cloneDeep } from \"lodash\";\n\nexport enum Direction {\n  Left,\n  Top,\n  Right,\n  Bottom,\n}\n\nexport enum State {\n  playing,\n  completed,\n}\n\ntype Position = {\n  row: number;\n  column: number;\n};\n\nconst dirPositions = new Map<Direction, Position>();\ndirPositions.set(Direction.Left, { row: 0, column: -1 });\ndirPositions.set(Direction.Top, { row: -1, column: 0 });\ndirPositions.set(Direction.Right, { row: 0, column: 1 });\ndirPositions.set(Direction.Bottom, { row: 1, column: 0 });\n\nfunction directionToPosition(direction: Direction) {\n  return dirPositions.get(direction)!;\n}\n\ntype Board = Array<\n  Level & {\n    playerPosition: Position;\n  }\n>;\n\nfunction getPlayerPosition<T extends Level>(level: T): Position {\n  const row = level.shape.findIndex((blocks) =>\n    blocks.some((block) =>\n      [Block.player, Block.playerOnObjective].includes(block)\n    )\n  );\n  if (row >= 0) {\n    const column = level.shape[row].findIndex((block) =>\n      [Block.player, Block.playerOnObjective].includes(block)\n    );\n    return { row, column };\n  }\n  throw new Error(`Invalid level, Player position not found : \n  ${level.shape}`);\n}\n\nexport function useSokoban() {\n  const { index, level, loadNext } = useLevels();\n  const [state, setState] = useState<State>(State.playing);\n  const initboard = useCallback(\n    () => [\n      {\n        ...level,\n        playerPosition: getPlayerPosition(level),\n      },\n    ],\n    [level]\n  );\n  const [board, setBoard] = useState<Board>(initboard);\n  const move = useCallback(\n    (direction: Direction) => {\n      if (state === State.playing) {\n        const dir = directionToPosition(direction);\n        const last = board[board.length - 1];\n        let next = cloneDeep(last);\n        next.playerPosition = {\n          row: last.playerPosition.row + dir.row,\n          column: last.playerPosition.column + dir.column,\n        };\n        // are we moving a block\n        let movingBlock = false;\n        if (\n          [Block.box, Block.boxOnObjective].includes(\n            last.shape[next.playerPosition.row][next.playerPosition.column]\n          ) &&\n          [Block.empty, Block.objective].includes(\n            last.shape[next.playerPosition.row + dir.row][\n              next.playerPosition.column + dir.column\n            ]\n          )\n        ) {\n          next.shape[next.playerPosition.row][next.playerPosition.column] -=\n            Block.box;\n          next.shape[next.playerPosition.row + dir.row][\n            next.playerPosition.column + dir.column\n          ] += Block.box;\n          movingBlock = true;\n        }\n        //are we moving into an empty space\n        if (\n          [Block.empty, Block.objective].includes(\n            next.shape[next.playerPosition.row][next.playerPosition.column]\n          )\n        ) {\n          next.shape[last.playerPosition.row][last.playerPosition.column] -=\n            Block.player;\n          next.shape[next.playerPosition.row][next.playerPosition.column] +=\n            Block.player;\n          if (\n            !next.shape.some((row) =>\n              row.some((block) =>\n                [Block.objective, Block.playerOnObjective].includes(block)\n              )\n            )\n          )\n            setState(State.completed);\n          if (!movingBlock) board.pop();\n\n          setBoard([...board, next]);\n        }\n      }\n    },\n    [board, state]\n  );\n\n  const next = useCallback(() => {\n    if (state === State.completed) {\n      loadNext();\n      setState(State.playing);\n    }\n  }, [state, loadNext]);\n  const undo = useCallback(() => {\n    if (state === State.playing && board.length > 1) {\n      setBoard(board.slice(0, -1));\n    }\n  }, [state, board]);\n  const restart = useCallback(() => {\n    if (state === State.playing) {\n      setBoard(initboard());\n    }\n  }, [state, initboard]);\n\n  useEffect(() => {\n    if (board[0].name !== level.name) setBoard(initboard());\n  }, [board, state, level, loadNext, next, restart, initboard, move]);\n\n  return {\n    index,\n    level: board[board.length - 1],\n    state,\n    move,\n    next,\n    undo,\n    restart,\n  };\n}\n","export const cn = (...names: string[]) => names.join(\" \");\n","import { Block } from \"../hooks/levels\";\nimport style from \"../components/sokoban.module.css\";\n\nconst styles = new Map<Block, string>();\nstyles.set(Block.empty, style.empty);\nstyles.set(Block.box, style.box);\nstyles.set(Block.boxOnObjective, style.boxjective);\nstyles.set(Block.objective, style.objective);\nstyles.set(Block.wall, style.wall);\nstyles.set(Block.player, style.player);\nstyles.set(Block.playerOnObjective, style.playerJective);\n\nexport function styleFrom(block: Block) {\n  return styles.get(block);\n}\n","import React from \"react\";\nimport \"./Game.css\";\nimport { Help } from \"./components/help\";\nimport { useSokoban, Direction, State } from \"./hooks/sokoban\";\nimport { useKeyBoard } from \"./hooks/keyboard\";\nimport style from \"./components/sokoban.module.css\";\nimport { cn } from \"./utils/classnames\";\nimport { styleFrom } from \"./utils/block-styles\";\n\nfunction Game() {\n  const { index, level, state, move, next, undo, restart } = useSokoban();\n  useKeyBoard(\n    (event) => {\n      switch (event.code) {\n        case \"ArrowUp\":\n          move(Direction.Top);\n          break;\n        case \"ArrowDown\":\n          move(Direction.Bottom);\n          break;\n        case \"ArrowLeft\":\n          move(Direction.Left);\n          break;\n        case \"ArrowRight\":\n          move(Direction.Right);\n          break;\n        case \"Enter\":\n          next();\n          break;\n        case \"Backspace\":\n          undo();\n          break;\n        case \"Escape\":\n          restart();\n          break;\n      }\n      event.preventDefault();\n    },\n    [\n      \"ArrowUp\",\n      \"ArrowDown\",\n      \"ArrowLeft\",\n      \"ArrowRight\",\n      \"Enter\",\n      \"Backspace\",\n      \"Escape\",\n    ]\n  );\n  return (\n    <div className=\"game\">\n      <div className={style.state}>\n        <div className={style.levelPrefix}>Level {index + 1} :</div>\n        <div className={style.levelTitle}>{level.name}</div>\n      </div>\n\n      <div className={style.board}>\n        {level.shape.map((row) => (\n          <div className={style.level}>\n            {row.map((block) => (\n              <div className={cn(style.element, styleFrom(block)!)} />\n            ))}\n          </div>\n        ))}\n      </div>\n      <Help />\n      {state === State.completed && (\n        <div className={style.state}>\n          <div className={style.levelState}>LEVEL completed </div>\n          <div className={style.helpNext}>Press ENTER to load next LEVEL</div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Game;\n","import { useEffect, useRef } from \"react\";\n\n/**\n * hook to listen for keyboard events and trigger a callback\n * @param callback callback to call when requested keys event are detected\n * @param codes an array of code representing the keys to listen events from\n * @param options control what events to listen (keydown by default)\n */\nexport function useKeyBoard(\n  callback: (event: KeyboardEvent) => void,\n  codes: string[],\n  options: {\n    keyup?: boolean;\n    keydown?: boolean;\n  } = { keydown: true, keyup: false }\n) {\n  const cb = useRef(callback);\n\n  useEffect(() => {\n    cb.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const downHandler = (event: KeyboardEvent) => {\n      if (codes.includes(event.code)) {\n        cb.current(event);\n      }\n    };\n    const upHandler = (event: KeyboardEvent) => {\n      if (codes.includes(event.code)) {\n        cb.current(event);\n      }\n    };\n    if (options.keydown) window.addEventListener(\"keydown\", downHandler);\n    if (options.keyup) window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [cb, codes, options.keyup, options.keydown]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./Game\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}